services:
  nestjs-app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: nestjs-prod
    ports:
      - '3000:3000'
    env_file:
      - .env.prod
    # environment:
    #   - NODE_ENV=${NODE_ENV}
    #   - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - postgres-prod
    networks:
      - nestjs-prod-network
    restart: always
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres-prod:
    image: postgres:15-alpine
    container_name: postgres-prod
    env_file:
      - .env.prod
    # environment:
    #   - POSTGRES_DB=${DB_NAME}
    #   - POSTGRES_USER=${DB_USER}
    #   - POSTGRES_PASSWORD=${DB_PASSWORD}
    #   - POSTGRES_HOST=${DB_HOST}
    #   - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - '5433:5432'
    volumes:
      - postgres-data-prod:/var/lib/postgresql/data
      - ./postgres-prod:/docker-entrypoint-initdb.d
    networks:
      - nestjs-prod-network
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U nestjs_user -d nestjs_prod']
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres-data-prod:

networks:
  nestjs-prod-network:
    driver: bridge
